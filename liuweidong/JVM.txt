java一些参数设置 ：
  -D<名称>=值  ： 设置系统属性    java -Dstr=liu  Deamo1      // 设置str属性为liu
  JVM的两种启动方式 ：
	  -client   初始堆空间小一些，使用串行化垃圾回回收器，让jvm启动快一些，运行比较慢
	  -server  分配的堆初始空间较大，使用并行垃圾回收器，启动慢运行快   ：  java -client -showversion Deamo1
	  在64位操作系统中，只能使用server操作方式
   
    -Xint  : 解释模式 ，运行较慢
    -Xcomp : 编译模式 ，运行较快
    -Xmixed :混合模式，有虚拟机决定

    -XX :主要用于jvm的调优和debug操作，有两种类型的参数 ：
           --boolean类型 ：
	      -XX:[+ -]name : 表示禁用或者启用name属性  
	            -XX:+DisableExplicitGC  ； 禁用手动调用gc操作
	   -- 非boolean类型 ：
	      -XX:name=value
	      -XX:newRotaio=1
	    
    -Xmx参数和-Xms参数 ： 设置堆内存初始大小，和最大大小
          java -Xms64m -Xmx128m Deamo1

   jps 查看jvm运行的进程
   jps -l 查看jvm运行的进行所属的包
    jinfo -flags 9598(id)  :查看进程参数
    jinfo -flag MaxHeapSize 9598  ：查看进程的某一个具体参数

  jstat ： 可以查看堆内存使用情况
        jstat -class 9598  ： 查看class加载统计
	jstat -compiler 9598   ：查看编译统计
	 jstat -gc 9598  ：垃圾回收统计
	 jstat -gc 9598  1000  5  ：每隔一秒，共打印5次

 jmap：内存溢出分析
       jmap -heap 9598  ：查看内存使用情况
       jmap -histo 9598 | more ：查看内存中对象的数量
       jmap -histo:live 9598 | more  :查看活跃的对象
        jmap -dump:format=b,file=/usr/local/dump.dat 9598   // 将内存信息导入到一个文件中
	jhat -port 9999 /usr/local/dump.dat    //分析dump文件       http://192.168.25.131:9999

	-Xmx8m -Xms8m  -XX:+HeapDumpOnOutOfMemoryError  ： 用于监控内存溢出，并将内存信息导入到一个文件中
	jstack id  : 查看一个线程的状况

	visualJUM工具通过JMX远程监控tomcat :
	   在cacatina.sh文件中加入 ：
	    CATALINA_OPTS=-Dcom.sun.management.jmxremote
	  -Dcom.sun.management.jmxremote.port=9999   // 端口号链接
	  -Dcom.sun.management.jmxremote.ssl=false
	  -Dcom.sun.management.jmxremote.authenticate=false  // 安全认证，不进行认证



JVM的优化 ：
    垃圾回收的常见的算法：引用计数法，标记清除法，标记压缩法，复制算法、分代算法
         标记压缩算法 ： 标记阶段是相同的标记出所有需要回收的对象，在标记完成之后不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动
	                        ，在移动过程中清理掉可回收的对象，这个过程叫做整理。
	 标记清除算法 ： 最基础的垃圾收集算法，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成之后统一回收掉所
	                         有被标记的对象。
                                 标记-清除算法的缺点有两个：首先，效率问题，标记和清除效率都不高。
				  其次，标记清除之后会产生大量的不连续的内存碎片，空间碎片太多会导致当程序需要为较大对象分配内存时无法找到足够的连续
				  内存而不得不提前触发另一次垃圾收集动作。
	 复制算法 ：将可用内存按容量分成大小相等的两块，每次只使用其中一块，当这块内存使用完了，就将还存活的对象复制到另一块内存上去，
	                  然后把使用过的内存空间一次清理掉。这样使得每次都是对其中一块内存进行回收，内存分配时不用考虑内存碎片等复杂情况，
			  这样会导致一半内存浪费
	引用计数法 ： 在每一个对象都设置一个计数器，当一个地方引用该对象时，计数器就会加一，当引用失效时，计数器就会减一。当计数器减到0时，
	                  此时，对象就可以被回收。 问题 ：当两个对象存在互相循环引用时，就会出现不能被回收的问题。
	跟搜索法 ： 通过名为GC_root的对象作为起点，从这些节点向下搜索，搜索过的路径称为引用链，当一个对象到GC-ROOT没有任何引用链时，这个对象
	                  将可以被回收。
	分代算法 ：
	              年轻代 : 复制算法
		      老年代：标记清除/ 标记整理（压缩）
		      永久代 ： 同老年代
		     
		     年轻代 ： Eden区，SurvivorFrom , SurviorTo ，内存空间占比 8 ： 1 ： 1，其种SurvivorFrom和SurvivorTo中总有一个是空闲的 
		                    创建一个新的对象时，将会在Eden区内分配内存，当Eden区内存不足时，触发Young GC，将Eden区中存活的对象复制到
				    From区，清空Eden区，当Eden区的空间再一次被用完，再次触发Young GC，这时，将Eden区和form区中存活的对象复制到‘
				    to区，当Eden区再次被用完时，将Eden和to区中存活的对象复制到from区，经过多次Young GC,某些对象超过某一个阀值仍然
				    还在存活，则该对象将会进入老年代。

				    注意：当创建某些较大的对象时，年轻代内存不足时，会直接在老年代分配内存


垃圾收集器以及内存分配 ：
    * 串行垃圾收集器 ： 只有一个单线程进行垃圾回收，在其工作时，java程序中所有其他线程都要停止工作。等待垃圾回收完成
                                 DefNew
   * ParNew 并行回收器
   * Parallel Scavenge
   * CMS GC
   * G1 GC

   2.1 新生代垃圾收集器


Serial（新生代串行收集器）
使用复制算法的垃圾回收器，只能用于新生代。Serial回收器使用单线程进行垃圾回收。
在 HotSpot 虚拟机中，使用-XX：+UseSerialGC 参数可以指定使用Serial（新生代串行收集器）+ Serial Old（老年代串行收集器）。当 JVM 在 Client 
模式下运行时，它是默认的垃圾收集器。


ParNew（新生代并行收集器）
Serial回收器的多线程版本，只能用于新生代。使用复制算法，多线程并行工作。在多CPU主机上的性能高于Serial，单CPU主机上的性能低于Serial。
如果使用-XX:+UseParNewGC，表示ParNew（并行收集器）+ Serial Old（串行收集器）




Parallel Scavenge（新生代并行回收收集器）
新生代并行回收收集器也是使用复制算法的收集器。从表面上看
，它和并行收集器一样都是多线程、独占式的收集器。但是，并行回收收集器有一个重要的特点：它非常关注系统的吞吐量。
在启动参数中指定-XX:+UseParallelGC，会使用Parallel Scavenge（新生代并行回收收集器） + SerialOld的回收器组合
如果使用-XX:+UseParallelOldGC，表示Parallel Scavenge（新生代并行回收收集器）+ Parallel Old（并行回收收集器）

2.2 老年代垃圾收集器


Serial Old 收集器
Serial收集器的老年版本，独占式，单线程，使用的是标记--整理算法，这个收集器的目的也是用于Client模式下的虚拟机使用。


Parallel Old收集器
是Parallel Scavenge收集器的老年版本，使用多线程和标记整理算法，注重吞吐量优先，在注重吞吐量和CPU资源铭感的场合，
都可以考虑Parallel Scavenge加Parallel Old收集器。


CMS收集器
CMS收集器（Concurrent Mark Sweep）是一种一获取最短回收停顿时间作为目标的收集器，目前很大一部分的Java应用都集中在互联网和B/S系统上，
这类应用尤其重视服务的响应速度，希望系统停顿的时间最短。 使用多线程和标记清除算法。


CMS收集器的运行过程可以分为四步：

1.初始标记：Stop the world，只标记GC Roots能直接关联到的对象。
2.并发标记：GC Roots Tracing
3.重新标记：Stop the world，修正并发标记期间，因用户程序继续运行导致标记产生变动的那一部分对象的标记记录。
4.并发清除：并发清除可以和用户线程一起运行，所以总体上停顿的时间非常短。

但是CMS收集器有三个显著缺点：

1.对CPU资源敏感。
2.无法处理浮动垃圾。
3.收集结束后会产生大量碎片：标记清除算法通病。

2.3 不分代收集器


G1收集器
基于标记整理算法，所以不会产生大量的空间碎片，而且他可以非常精确的控制停顿，G1收集器可以实现在基本不牺牲吞吐量的前提下完成低停顿的内存回收，
这是由于它能极力的避免全区域的垃圾收集，之前的收集器进行收集的范围都是整个新生代或者老年代，而G1收集器将整个内存堆分为多个大小固定的独立去，
跟踪这些区域里垃圾对集成度，在后台维护一个优先列表，每次根据允许的收集时间，优先收集垃圾最多的区域，区域划分及有优先级的区域回收，保证了G1
收集器在有限的时间内可以获得极高的效率。



四大引用 ： 强引用 ： 当内存不足时，抛出内存溢出异常
                  软引用 ： 当内存不足时，将于软引用关联的对象回收
		  弱引用 ： 当内存足或者不足时，都将会回收关联的对象
		  虚引用 ： 形同虚设，相当于没有引用，并不会影响对象的生命周期，在任何时刻都会被垃圾回收器回收。他必须与引用队列进行关联使用

	