1、四种排序方法： 快速排序，插入排序，冒泡排序，选择排序
public class Arrays {
	   public static void main(String[] args){
		int a[] = {1,4,8,3,7,9,7,1,555,3,6,7,41,5,69,5899,54,22,11,23,47,69,66,66};
		//orderBychose(a);
		//orderByMaopao(a);
		// orderByInsert(a);
		orderByQuickSort(a, 0, a.length-1);
		show(a);
		
	}
	//快速排序
	   public  static void orderByQuickSort(int a[],int low, int hei){
		   int i , j , temp, t;
		   if(low > hei)
			   return;
		   i = low;
		   j = hei;
		   // 定义的基准位
		   temp = a[low];
		   while( i < j){
			   // 先从右边向左推算，找到比基准位小的数的下标
			  while(i < j && a[j] >= temp){
				   j--;
			   }
			   // 在从左向右推算，找到比基准为大的数的下标
			  while( i < j && a[i] <= temp){
				  i++;
			  }
			  // 找到满足条件的i， j 后进行交换
			  if( i < j){
				  t = a[i];
				  a[i] = a[j];
				  a[j] = t;
			  }
		   }
		   // 最后 i, j 将指向同一个数，此时将这个数与基准位得数交换
		   a[low] = a[i];
		   a[i] = temp;
		   
		   // 完成第一次推算后，对左半部分进行推算
		   orderByQuickSort(a, low, j-1);
		   // 对右边进行推算
		   orderByQuickSort(a, j+1, hei);
		   
	   }
	   
	   
	// 插入排序法
	   public static void orderByInsert(int []a){
		   int temp = 0;
		   for(int i =1 ; i < a.length; i++){
			   temp = a[i];
			   int j = i - 1;
			   while( temp > a[j]){
				   a[j+1] = a[j];
				   j--;
				   if(j == -1){
					   break;
				   }
			   }
			   a[j+1] = temp;
		   }
		   show(a);
	   }
	// 冒泡排序法
	   public static void orderByMaopao(int a[]){
		   int temp = 0;
		   for(int i = 0; i < a.length; i++){
			   for(int j = 0; j < a.length - i - 1; j++){
				   if (a[j] > a[j+1]){
					   temp = a[j];
					   a[j] = a[j + 1];
					   a[j + 1] = temp;
				   }
			   }
		   }
		   show(a);
	   }
	// 选择排序法
	   public static void orderBychose(int a[]){
		   int temp = 0;
		   for(int i = 0; i < a.length; i++){
			   for(int j = i + 1; j < a.length; j++){
				   if (a[i] > a[j]){
					   temp = a[i];
					   a[i] = a[j];
					   a[j] = temp;
				   }
			   }
		   }
		   show(a);
	   }
	private static void show(int[] a) {
		for( int k = 0; k < a.length; k++){
			   System.out.print(a[k]+"        ");
		   }
	}
 
}

// 希尔排序法 ：
           // 设置步长
        for(int d=arr.length/2;d > 0; d=d/2){
            // 遍历每一个步长
            for(int i = d; i >0; i--){
                for (int j = i-d; j >=0; j=j-d){
                    // 进行比较
                    if(arr[j] > arr[j+d]){
                        int temp = arr[j];
                        arr[j] = arr[j+d];
                        arr[j+d] = temp;
                    }
                }
            }
        }
        System.out.println(Arrays.toString(arr));
    }


归并排序 ：
		     public void MergerSort(){
			int []arr = new int[]{1,3,2,40,8,7,9,4};
			mergerSort(arr,0,arr.length-1);

		    }

		    public void mergerSort(int []arr,int low, int high){
			int middle = (low+high)/2;
			// 采用递归，将一个数组不断的进行分割，分割成最小两段后进行合并
			if(low < high) {
			    // 处理左半部分
			    mergerSort(arr, low, middle);
			    // 处理右半部分
			    mergerSort(arr, middle + 1, high);
			    // 合并
			    merger(arr, low, middle, high);
			}
		    }
		    // 一个数组前一段已经排好序，后一段也已经排好序了，进行归并
		    public  void merger(int []arr, int low, int middle, int high){
			int []temp = new int[high-low+1];
			int index = 0;
			int i = low;
			int j = middle+1;
			while(i <= middle && j <= high){
			    if(arr[i] <= arr[j]){
				temp [index++] = arr[i];
				i++;
			    }else {
				temp[index++] = arr[j];
				j++;
			    }
			}
			while (j<=high){
			    temp[index++] = arr[j];
			    j++;
			}
			while (i <= middle){
			    temp[index++] = arr[i];
			    i++;
			}
			// 将临时数组存如原数组中
			for (int k = 0; k < temp.length; k++) {
			   arr[k+low] = temp[k];
			}
		      //  System.out.println(Arrays.toString(arr));

		    }


